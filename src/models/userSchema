const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const gravatar = require('gravatar');

const userSchema = new mongoose.Schema(
  {
    username: {
      type: String,
      minLength: 3,
      required: [true, 'Username required'],
    },
    email: {
      type: String,
      required: [true, 'Email is required'],
      unique: true,
    },
    password: {
      type: String,
      required: [true, 'Password is required'],
    },
    token: {
      type: String,
      default: null,
    },
    avatarURL: {
      type: String,
      minLength: 2,
    },
    verify: {
      type: Boolean,
      default: false,
    },
    verificationToken: {
      type: String,
      default: null,
    },
    providers: [
      {
        name: { type: String, enum: ['google', 'facebook'], required: true },
        id: { type: String, required: true }, // ID-ul OAuth primit de la provider
      },
    ],
    refreshToken: {
      token: { type: String, default: null },
      createdAt: { type: Date, default: Date.now },
      expiresAt: {
        type: Date,
        default: () => Date.now() + 7 * 24 * 60 * 60 * 1000,
      },
    },
    theme: {
      type: String,
      enum: ['dark', 'light'],
      default: 'light',
    },
  },
  { versionKey: false, timestamps: true }
);

userSchema.methods.setPassword = function (password) {
  this.password = bcrypt.hashSync(password, bcrypt.genSaltSync(10));
};

userSchema.methods.validPassword = function (password) {
  return bcrypt.compareSync(password, this.password);
};

userSchema.pre('save', function (next) {
  if (!this.avatarURL) {
    this.avatarURL = gravatar.url(
      this.email,
      { s: 200, r: 'pg', d: 'identicon' },
      true
    );
  }
  next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
